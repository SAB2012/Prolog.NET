//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.SampleDataSource
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class SampleDataSource { }
#else

	public class SampleDataSource : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public SampleDataSource()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/PrologWorkbench.Editor;component/SampleData/SampleDataSource/SampleDataSource.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private SampleProgramViewModel _SampleProgramViewModel = new SampleProgramViewModel();

		public SampleProgramViewModel SampleProgramViewModel
		{
			get
			{
				return this._SampleProgramViewModel;
			}

			set
			{
				if (this._SampleProgramViewModel != value)
				{
					this._SampleProgramViewModel = value;
					this.OnPropertyChanged("SampleProgramViewModel");
				}
			}
		}

		private SampleTransciptViewModel _SampleTransciptViewModel = new SampleTransciptViewModel();

		public SampleTransciptViewModel SampleTransciptViewModel
		{
			get
			{
				return this._SampleTransciptViewModel;
			}

			set
			{
				if (this._SampleTransciptViewModel != value)
				{
					this._SampleTransciptViewModel = value;
					this.OnPropertyChanged("SampleTransciptViewModel");
				}
			}
		}

		private SampleCommandViewModel _SampleCommandViewModel = new SampleCommandViewModel();

		public SampleCommandViewModel SampleCommandViewModel
		{
			get
			{
				return this._SampleCommandViewModel;
			}

			set
			{
				if (this._SampleCommandViewModel != value)
				{
					this._SampleCommandViewModel = value;
					this.OnPropertyChanged("SampleCommandViewModel");
				}
			}
		}
	}

	public class SampleProgramViewModel : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Title = string.Empty;

		public string Title
		{
			get
			{
				return this._Title;
			}

			set
			{
				if (this._Title != value)
				{
					this._Title = value;
					this.OnPropertyChanged("Title");
				}
			}
		}
	}

	public class SampleTransciptViewModel : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Title = string.Empty;

		public string Title
		{
			get
			{
				return this._Title;
			}

			set
			{
				if (this._Title != value)
				{
					this._Title = value;
					this.OnPropertyChanged("Title");
				}
			}
		}
	}

	public class SampleCommandViewModel : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Title = string.Empty;

		public string Title
		{
			get
			{
				return this._Title;
			}

			set
			{
				if (this._Title != value)
				{
					this._Title = value;
					this.OnPropertyChanged("Title");
				}
			}
		}
	}
#endif
}
